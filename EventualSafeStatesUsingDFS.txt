#include<bits/stdc++.h>
using namespace std;

const int V = 7;

void addEdge(vector<int> adj[], int source, int destination) {
    adj[source].push_back(destination);
}
bool DFS(int initial_node, vector<int> adj[], vector<int> &visited, vector<int> &pathVisited) {
    visited[initial_node] = 1;
    pathVisited[initial_node] = 1;
    for(int neighbour: adj[initial_node]) {
        if(!visited[neighbour]) {
            if(DFS(neighbour, adj, visited, pathVisited)) {
                return true;
            }
        }
        else if(pathVisited[neighbour]) {
            return true;
        }
    }
    
    pathVisited[initial_node] = 0;
    return false;
}
bool detectCycle(vector<int> adj[], vector<int> &visited, vector<int> &pathVisited) {
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            if(DFS(i, adj, visited, pathVisited)) {
                return true;
            }
        }
    }
    return false;
}
int main() {
    
    vector<int> adj[V];
    
    addEdge(adj, 0, 2);
    addEdge(adj, 0, 1);
    addEdge(adj, 1, 3);
    addEdge(adj, 1, 2);
    addEdge(adj, 3, 0);
    addEdge(adj, 2, 5);
    addEdge(adj, 4, 5);
    
    vector<int> visited(V, 0);
    vector<int> pathVisited(V, 0);
    
    if(detectCycle(adj, visited, pathVisited)) {
        cout<<"Cycle detected !!"<<endl;
    }
    else {
        cout<<"Cycle not detected !!"<<endl;
    }
    cout<<"Eventual Safe nodes are : "<<endl;
    for(int i = 0; i < pathVisited.size(); i++) {
        if(pathVisited[i] == 0) {
            cout<<i<<" ";
        }
    } 
    
    return 0;
}